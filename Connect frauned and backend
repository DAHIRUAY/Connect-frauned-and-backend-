('/api/data', (req, res) => {
  res.json({ message: "Hello from backend!" });
});


2. Use fetch or axios in React

useEffect(() => {
  fetch('http://localhost:3000/api/data')
    .then(res => res.json())
    .then(data => console.log(data));
}, []);


3. CORS Setup (on the backend):

npm install cors

const cors = require('cors');
app.use(cors({ origin: 'http://localhost:5173' })); // or your frontend URL




---

✅ 2. Implement Authentication Flows

Goal: Allow users to sign up, log in, and access protected routes.

🛠 Tools:

JWT (jsonwebtoken)

bcrypt (bcryptjs)

Express middleware

PostgreSQL or MongoDB to store users


🔐 Flow:

1. User signs up → POST /auth/register


2. User logs in → POST /auth/login → backend returns JWT


3. Frontend stores token → usually in localStorage


4. Protected routes → send token in headers (e.g., Authorization: Bearer <token>)



🧩 Example login route (backend):

const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

app.post('/auth/login', async (req, res) => {
  const user = await db.findUser(req.body.email);
  const valid = bcrypt.compareSync(req.body.password, user.password);
  if (!valid) return res.status(401).send("Invalid credentials");

  const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ token });
});


---

✅ 3. Deploy Full-Stack Application

🔼 Backend Deployment

Platforms: Render, Railway, Fly.io, or VPS

Common steps:

Push backend to GitHub

Link repo to your host

Set env variables

Open ports (usually 3000)



🌐 Frontend Deployment

Platforms: Vercel, Netlify, or GitHub Pages

Build frontend:

npm run build

Deploy /dist or /build folder


🌍 CORS and Proxy

In production, make sure your frontend makes requests to the deployed backend API.

Optional in development: In vite.config.js or package.json:

proxy: {
  '/api': 'http://localhost:3000'
}



---

✅ 4. Work with External APIs

💡 Examples:

Weather: https://api.openweathermap.org/

Payments: Stripe

AI: OpenAI API

Location: Mapbox, Google Maps


📥 Sample fetch in Express:

const axios = require('axios');

app.get('/api/weather', async (req, res) => {
  const { city } = req.query;
  const response = await axios.get(`https://api.weatherapi.com/v1/current.json`, {
    params: {
      key: process.env.WEATHER_API_KEY,
      q: city
    }
  });
  res.json(response.data);
});

🔐 Keep API keys in .env and never expose them to frontend directly.


---

✅ Optional Full-Stack Stack Recommendation

Layer	Tool

Frontend	React + Tailwind
Backend	Express.js
DB	PostgreSQL (with Prisma or Sequelize)
Auth	JWT
Deployment	Vercel (frontend), Render (backend)



---
