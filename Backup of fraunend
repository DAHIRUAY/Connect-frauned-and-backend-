Features

Express-based REST API

In-memory movie storage (can be swapped with a database like PostgreSQL or MongoDB)

CRUD routes: Create, Read (all + by ID), Update, Delete

JSON input/output



---

📁 Project Structure

movie-api/
├── server.js
├── routes/
│   └── movies.js
├── data/
│   └── movies.js


---

✅ Step 1: Setup

Initialize a new Node project

mkdir movie-api
cd movie-api
npm init -y
npm install express cors


---

✏️ Step 2: Create Files

server.js – Entry Point

const express = require('express');
const cors = require('cors');
const movieRoutes = require('./routes/movies');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// Routes
app.use('/api/movies', movieRoutes);

app.listen(PORT, () => {
  console.log(`🎬 Server running at http://localhost:${PORT}`);
});


---

data/movies.js – In-Memory Mock Data

let movies = [
  {
    id: 1,
    title: "Inception",
    genre: "Sci-Fi",
    rating: 8.8,
    poster:
      "https://image.tmdb.org/t/p/w500/qmDpIHrmpJINaRKAfWQfftjCdyi.jpg",
  },
  {
    id: 2,
    title: "The Dark Knight",
    genre: "Action",
    rating: 9.0,
    poster:
      "https://image.tmdb.org/t/p/w500/qJ2tW6WMUDux911r6m7haRef0WH.jpg",
  },
];

module.exports = movies;


---

routes/movies.js – Movie Routes

const express = require('express');
const router = express.Router();
let movies = require('../data/movies');

// GET all movies
router.get('/', (req, res) => {
  res.json(movies);
});

// GET movie by ID
router.get('/:id', (req, res) => {
  const movie = movies.find(m => m.id === parseInt(req.params.id));
  if (!movie) return res.status(404).json({ error: 'Movie not found' });
  res.json(movie);
});

// POST new movie
router.post('/', (req, res) => {
  const { title, genre, rating, poster } = req.body;
  const newMovie = {
    id: movies.length + 1,
    title,
    genre,
    rating,
    poster,
  };
  movies.push(newMovie);
  res.status(201).json(newMovie);
});

// PUT update movie
router.put('/:id', (req, res) => {
  const { id } = req.params;
  const index = movies.findIndex(m => m.id === parseInt(id));
  if (index === -1) return res.status(404).json({ error: 'Movie not found' });

  const { title, genre, rating, poster } = req.body;
  movies[index] = { id: parseInt(id), title, genre, rating, poster };
  res.json(movies[index]);
});

// DELETE movie
router.delete('/:id', (req, res) => {
  const { id } = req.params;
  movies = movies.filter(m => m.id !== parseInt(id));
  res.status(204).send();
});

module.exports = router;


---

✅ Run the Server

node server.js

Server will run on http://localhost:3000/api/movies


---

🧪 Test the API Endpoints

Method	URL	Description

GET	/api/movies	List all movies
GET	/api/movies/:id	Get movie by ID
POST	/api/movies	Add a new movie
PUT	/api/movies/:id	Update a movie
DELETE	/api/movies/:id	Delete a movie


Use Postman, curl, or a frontend like React to test the API.


---

🔄 Next Steps (Optional)

Would you like to:

Connect this to a PostgreSQL or MongoDB database?

Add search/filter endpoints?

Integrate authentication (JWT)?


Let me know, and I’ll help extend the backend further.

